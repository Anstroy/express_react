{"version":3,"sources":["Nav.js","About.js","Shop.js","App.js","registerServiceWorker.js","index.js"],"names":["Nav","navStyle","color","className","to","style","About","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","json","console","log","films","map","item","i","key","Home","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sNAwBeA,MApBf,WACE,IAAMC,EAAW,CACfC,MAAO,SAGT,OACE,6BACE,oCACA,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAMC,GAAG,SAASC,MAAOJ,GACvB,sCAEF,kBAAC,IAAD,CAAMG,GAAG,QAAQC,MAAOJ,GACtB,wCCNKK,MARf,WACE,OACE,6BACE,4C,iCCqBSC,MAxBf,WACEC,qBAAU,WACRC,MACC,IAHW,MAKYC,mBAAS,IALrB,mBAKPC,EALO,KAKAC,EALA,KAORH,EAAU,uCAAG,8BAAAI,EAAA,sEACEC,MAAM,kCADR,cACXC,EADW,gBAEGA,EAAKC,OAFR,OAEXL,EAFW,OAGjBM,QAAQC,IAAIP,GAEZC,EAASD,EAAMQ,OALE,2CAAH,qDAQhB,OACE,6BACGR,EAAMS,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,GAAID,Q,OCCrB,IAAMG,EAAO,kBACX,6BACE,2CAIWC,EArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWtB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,QAAQE,UAAWrB,QCLnCsB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1B9B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB8B,OAAM,SAAAC,GACLhC,QAAQgC,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BtB,MAAMsB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBY,OAAM,WACL/B,QAAQC,IACN,oEAzDAgD,CAAwB9B,GAHxBD,EAAgBC,OC7BxB+B,I","file":"static/js/main.b8947db3.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport \"./App.css\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction Nav() {\r\n  const navStyle = {\r\n    color: \"white\",\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <h3>Logo</h3>\r\n      <ul className=\"nav-links\">\r\n        <Link to=\"/about\" style={navStyle}>\r\n          <li>About</li>\r\n        </Link>\r\n        <Link to=\"/shop\" style={navStyle}>\r\n          <li>Shop</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { Component } from \"react\"\r\nimport \"./App.css\"\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h1>About Page</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React, { useState, useEffect } from \"react\"\r\nimport \"./App.css\"\r\n\r\nfunction Shop() {\r\n  useEffect(() => {\r\n    fetchItems()\r\n  }, [])\r\n\r\n  const [items, setItems] = useState([])\r\n\r\n  const fetchItems = async () => {\r\n    const data = await fetch(\"https://swapi.dev/api/people/1\")\r\n    const items = await data.json()\r\n    console.log(items)\r\n\r\n    setItems(items.films)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {items.map((item, i) => (\r\n        <h1 key={i}>{item}</h1>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Shop\r\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport Nav from \"./Nav\"\nimport About from \"./About\"\nimport Shop from \"./Shop\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop\" component={Shop} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nconst Home = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n)\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}